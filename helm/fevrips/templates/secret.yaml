{{- if not .Values.database.auth.existingSecret }}
{{- $dbHost := printf "%s-db" (include "fevrips.fullname" .) }}
{{- $dbPassword := .Values.database.auth.rootPassword }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "fevrips.fullname" . }}-db-secret
  labels:
    {{- include "fevrips.labels" . | nindent 4 }}
type: Opaque
data:
  {{ .Values.database.auth.secretKeys.rootPasswordKey }}: {{ .Values.database.auth.rootPassword | b64enc | quote }}
  connection-string-prod: {{ printf "Server=%s;Database=%s;User Id=sa;Password=%s;TrustServerCertificate=True;" $dbHost .Values.api.production.database $dbPassword | b64enc | quote }}
  connection-string-stage: {{ printf "Server=%s;Database=%s;User Id=sa;Password=%s;TrustServerCertificate=True;" $dbHost .Values.api.staging.database $dbPassword | b64enc | quote }}
{{- else }}
# When using existing secret, create a proxy secret with connection strings
{{- $dbHost := printf "%s-db" (include "fevrips.fullname" .) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "fevrips.fullname" . }}-db-secret
  labels:
    {{- include "fevrips.labels" . | nindent 4 }}
type: Opaque
stringData:
  connection-string-prod: "Server={{ $dbHost }};Database={{ .Values.api.production.database }};User Id=sa;Password=$(SA_PASSWORD);TrustServerCertificate=True;"
  connection-string-stage: "Server={{ $dbHost }};Database={{ .Values.api.staging.database }};User Id=sa;Password=$(SA_PASSWORD);TrustServerCertificate=True;"
{{- end }}